server:
  port: 8080

gitlab:
  url: ${GITLAB_URL}
  token: ${GITLAB_TOKEN}
  username: ${GITLAB_USER_NAME}
  password: ${GITLAB_PASSWORD}
  base-path: ${GITLAB_STORE_PATH}

spring:
  application:
    name: doc-generator
  datasource:
    url: jdbc:postgresql://localhost:5434/docgen
    username: docgen
    password: docgen
  liquibase:
    change-log: classpath:/liquibase/db.changelog-master.xml

  jpa:
    properties:
      hibernate.type.preferred_json_mapper: jackson
  ai:
    openai:
      base-url: http://${OLLAMA_HOSTNAME:localhost}:11434
      api-key: dummy
      chat:
        options:
          model: qwen2.5:0.5b
    ollama:
      base-url: http://${OLLAMA_HOSTNAME:localhost}:11434
      embedding:
        model: ${OLLAMA_EMBEDDING_MODEL:nomic-embed-text}
        options:
          num-ctx: 8192
      # чтобы не плодить лишний ChatModel (и не уехать в /api/chat):
      chat:
        enabled: false

    clients:
      coder:
        model: qwen2.5-coder:14b
        temperature: 0.1
        top-p: 0.9
        seed: 42
        system: |
          Ты — строгий инженер-кодер. Объясняй код без домыслов, пунктами, лаконично.
          Структура: Purpose; Inputs; Outputs; Throws; SideEffects; Preconditions; Postconditions;
          Concurrency; I/O; Calls/CalledBy; Complexity; EdgeCases; Invariants.
          Запрещены предположения, если не следует из кода. Короткие формулировки.

      talker:
        model: qwen2.5-coder:14b
        temperature: 0.3
        top-p: 0.9
        seed: 42
        system: |
          Ты — технический писатель. Перепиши пояснение простой человеческой речью (3–6 предложений).
          Избегай жаргона и повторов. Никаких домыслов сверх исходного текста. Отрази важные caveats.

    vectorstore:
      pgvector:
        initialize-schema: false
        table-name: ai_documents
        schema-name: doc_generator
        index-type: HNSW
        distance-type: COSINE_DISTANCE
        dimensions: 1024
    chat:
      memory:
        repository:
          jdbc:
            table-name: ai_chat_memory

management:
  endpoints.web.exposure.include: health,info,prometheus
  metrics.tags.application: ${spring.application.name}

logging:
  level:
    root: INFO
    mcdodik: DEBUG
    #        org.flywaydb: DEBUG

    # WebClient + Reactor Netty
    reactor.netty.http.client: DEBUG
    reactor.netty.transport: DEBUG
    reactor.netty.resources: DEBUG

    org.springframework.web.client.RestClient: DEBUG
    # Покажет детали на уровне Apache: пулинг, keep-alive и т.д.
    org.apache.hc.client5: DEBUG

    # Spring WebFlux
    org.springframework.web: DEBUG
    org.springframework.web.reactive: DEBUG
    org.springframework.http.client: DEBUG
    org.springframework.web.client.RestTemplate: DEBUG

    # Чтобы видеть фильтры и обмен данными
    org.springframework.web.reactive.function.client.ExchangeFunctions: TRACE
    org.springframework.web.reactive.function.client.ExchangeFilterFunctions: TRACE

springdoc:
  api-docs.enabled: true
  swagger-ui.path: /swagger


