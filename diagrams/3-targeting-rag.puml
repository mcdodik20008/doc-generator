@startuml
title Goal-driven RAG Context Assembly (Graph Neighborhood + Profiles)

actor User as U
participant "Web UI\n(Thymeleaf)" as UI
participant "DocController\n(@Controller)" as CTRL
participant "IntentRouter\n(goal)" as IR
participant "Neighborhood\nCollector" as NB
participant "HybridRetriever\n(FTS+Vector)" as HR
database "DB\n(node/edge/chunk/profiles)" as DB
participant "ContextAssembler" as CA
participant "LLM Writer\n(goal-aware)" as WR
participant "Template Engine" as TPL

U -> UI : open /search?q=...&goal=refactor|teach|api-doc
UI -> CTRL : GET /search
activate CTRL
CTRL -> IR : resolveGoal(params)
IR --> CTRL : goal='refactor' (ex.)

CTRL -> NB : collectNeighbors(seedNodes, radius=2, edgeKinds=[CALLS,WRITES,IMPLEMENTS])
activate NB
NB -> DB : SELECT neighbors by edge kinds
DB --> NB : subgraph(nodes,edges)
NB --> CTRL : Subgraph

CTRL -> HR : retrieve(q, k_vec=40, k_bm25=40, filters by lang/module)
activate HR
HR -> DB : ANN(pgvector) + FTS(BM25/Trgm)
DB --> HR : candidates@k
HR --> CTRL : retrievedChunks
deactivate HR

CTRL -> CA : assembleContext(goal, subgraph, retrievedChunks)
activate CA
CA -> DB : SELECT profiles for nodes (coder|instruct|speaker)
DB --> CA : profiles
CA --> CTRL : GoalContext{ code slices, relations, chosenProfile }

CTRL -> WR : write(goal, context, profileText)
activate WR
WR --> CTRL : draft(answer, citations)
deactivate WR

CTRL -> TPL : render(view, model=answer+citations+goal)
TPL --> CTRL : HTML
CTRL -> UI : 200 OK (HTML)
deactivate CTRL
@enduml
